JavaScript QRCode reader for HTML5 enabled browser.
forked from Lazar Laszlo ( http://lazarsoft.info )
at https://github.com/LazarSoft/jsqrcode
Which was  a port of ZXing qrcode scanner, http://code.google.com/p/zxing.

Changes to the original:
I needed an AMD module, preferably a single file, that I could load in Poodll in Moodle.
So I simply combined all the files into a (new) single file, poodll_qrscanner.js. In that file I added a few functions that can be called on the AMD module.


Usage:
Its an AMD module so put it in the right place and add code to load it as a dependency to your code at the top of your AMD module. Like this:
(In Moodle)
define(['jquery', 'core/log','poodll_qrscanner'], function($, log, scanner) { ..
(Elsewhere)
define('poodll_qrscanner'], function(scanner) { ..



Then when you want to use it, put an HTML5 video element on the page and make sure you give it an ID.
Then in your JS/AMD code:
scanner.callback=function(data){alert(data);};
scanner.startWebCam('video_element_id');
scanner.startScan('video_element_id');

NOTES:
i) You can also call:
scanner.stopWebCam();
scanner.stopScan();

ii) when the scanner detects and decodes a qrcode the decoded text data will be passed to the function you set in the callback property.
That is where you will kick off all your interesting stuff.

iii) I seperated the scan and webcam logic completely. So its possible to have your own webcam capture code and just pass the id of the video element you use there to the startScan function.
 You could even play a video with QR codes in the video element and then they would scan .....if you wanted to do that....but why ?

iv) This was written for use in Poodll on Moodle and there we use the nice logging functions available in that environment. Its the only dependency we added. It doesn't even use jquery.
 So if you want to use this elsewhere, just replace all calls to log.debug() with calls to console.log() in poodll_qrscanner.js

